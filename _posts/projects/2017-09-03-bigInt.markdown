---
layout: right-Sidebar
title: C++ Big Int Class
desc: For when 18,446,744,073,709,551,615 just isn't big enough
img: images/projectPics/bigInt/featuredpic.JPG
categories: carousel code-projects
sidebar-items:
  - image: images/projectPics/bigInt/sidePic1.JPG
    title: Source code example
    description: Here is an example of how easy integrating "big int" into your project can be! Its just like any other numeral data-type
  - image: images/projectPics/bigInt/sidePic2.JPG
    title: Division Function
    description: Here's a sneak peak into the division operator that I wrote for the class.
  - image: images/projectPics/bigInt/sidePic3.JPG
    title: Operator Overload
    description: Here's just a sample of the operators overloaded in order to make the user experience as streamlined as possible.
main-items:
  - title: The purpose
    text: |
      There comes a time in ever young C++ programmer's development career in which they realize, "the numbers
      I can use just aren't big enough for this." This problem certainly happened for me quite a big during
      programming/math challenges like the Purple Comet exam and Project Euler problems; and honestly I was sick of it. I decided to
      take destiny into my own hands and write a class that solved this issue.

  - title: What's so cool about this?
    text: |
      Using C++ vectors, each individual digit was stored as an char in an "int" vector. While not
      incredibly efficient in terms of storage, it worked for my needs. From here I implemented every
      basic math function literally from the ground up; digit based addition, semi-repeated addition for multiplication, etc.
      Since everything was digit based, whenever I built a new function, I could only use the functions
      I had already wrote prior as groundwork. All of this coupled together makes this one of the projects
      I am most proud of.


github-link: https://github.com/Joe-McCann/My-Projects/tree/master/C%2B%2B/C%20%2B%2B%20Big%20Integer%20Class
---
